# This file is generated by Tools/cases_generator/generate_cases.py
# <imports>
opcode_metadata = {
    'NOP': {
        'input_effects': [],
        'output_effects': [],
        'popped': lambda oparg, jump: 0,
        'pushed': lambda oparg, jump: 0,
        'instr_fmt': 'IX',
    },
    'RESUME': {
        'input_effects': [],
        'output_effects': [],
        'popped': lambda oparg, jump: 0,
        'pushed': lambda oparg, jump: 0,
        'instr_fmt': 'IB',
    },
    'LOAD_CLOSURE': {
        'input_effects': [],
        'output_effects': [('value', '', '', '')],
        'popped': lambda oparg, jump: 0,
        'pushed': lambda oparg, jump: 1,
        'instr_fmt': 'IB',
    },
    'LOAD_FAST_CHECK': {
        'input_effects': [],
        'output_effects': [('value', '', '', '')],
        'popped': lambda oparg, jump: 0,
        'pushed': lambda oparg, jump: 1,
        'instr_fmt': 'IB',
    },
    'LOAD_FAST': {
        'input_effects': [],
        'output_effects': [('value', '', '', '')],
        'popped': lambda oparg, jump: 0,
        'pushed': lambda oparg, jump: 1,
        'instr_fmt': 'IB',
    },
    'LOAD_CONST': {
        'input_effects': [],
        'output_effects': [('value', '', '', '')],
        'popped': lambda oparg, jump: 0,
        'pushed': lambda oparg, jump: 1,
        'instr_fmt': 'IB',
    },
    'STORE_FAST': {
        'input_effects': [('value', '', '', '')],
        'output_effects': [],
        'popped': lambda oparg, jump: 1,
        'pushed': lambda oparg, jump: 0,
        'instr_fmt': 'IB',
    },
    'POP_TOP': {
        'input_effects': [('value', '', '', '')],
        'output_effects': [],
        'popped': lambda oparg, jump: 1,
        'pushed': lambda oparg, jump: 0,
        'instr_fmt': 'IX',
    },
    'PUSH_NULL': {
        'input_effects': [],
        'output_effects': [('res', '', '', '')],
        'popped': lambda oparg, jump: 0,
        'pushed': lambda oparg, jump: 1,
        'instr_fmt': 'IX',
    },
    'UNARY_NEGATIVE': {
        'input_effects': [('value', '', '', '')],
        'output_effects': [('res', '', '', '')],
        'popped': lambda oparg, jump: 1,
        'pushed': lambda oparg, jump: 1,
        'instr_fmt': 'IX',
    },
    'UNARY_NOT': {
        'input_effects': [('value', '', '', '')],
        'output_effects': [('res', '', '', '')],
        'popped': lambda oparg, jump: 1,
        'pushed': lambda oparg, jump: 1,
        'instr_fmt': 'IX',
    },
    'UNARY_INVERT': {
        'input_effects': [('value', '', '', '')],
        'output_effects': [('res', '', '', '')],
        'popped': lambda oparg, jump: 1,
        'pushed': lambda oparg, jump: 1,
        'instr_fmt': 'IX',
    },
    'BINARY_OP_MULTIPLY_INT': {
        'input_effects': [('left', '', '', ''), ('right', '', '', '')],
        'output_effects': [('prod', '', '', '')],
        'popped': lambda oparg, jump: 2,
        'pushed': lambda oparg, jump: 1,
        'instr_fmt': 'IXC',
    },
    'BINARY_OP_MULTIPLY_FLOAT': {
        'input_effects': [('left', '', '', ''), ('right', '', '', '')],
        'output_effects': [('prod', '', '', '')],
        'popped': lambda oparg, jump: 2,
        'pushed': lambda oparg, jump: 1,
        'instr_fmt': 'IXC',
    },
    'BINARY_OP_SUBTRACT_INT': {
        'input_effects': [('left', '', '', ''), ('right', '', '', '')],
        'output_effects': [('sub', '', '', '')],
        'popped': lambda oparg, jump: 2,
        'pushed': lambda oparg, jump: 1,
        'instr_fmt': 'IXC',
    },
    'BINARY_OP_SUBTRACT_FLOAT': {
        'input_effects': [('left', '', '', ''), ('right', '', '', '')],
        'output_effects': [('sub', '', '', '')],
        'popped': lambda oparg, jump: 2,
        'pushed': lambda oparg, jump: 1,
        'instr_fmt': 'IXC',
    },
    'BINARY_OP_ADD_UNICODE': {
        'input_effects': [('left', '', '', ''), ('right', '', '', '')],
        'output_effects': [('res', '', '', '')],
        'popped': lambda oparg, jump: 2,
        'pushed': lambda oparg, jump: 1,
        'instr_fmt': 'IXC',
    },
    'BINARY_OP_INPLACE_ADD_UNICODE': {
        'input_effects': [('left', '', '', ''), ('right', '', '', '')],
        'output_effects': [],
        'popped': lambda oparg, jump: 2,
        'pushed': lambda oparg, jump: 0,
        'instr_fmt': 'IX',
    },
    'BINARY_OP_ADD_FLOAT': {
        'input_effects': [('left', '', '', ''), ('right', '', '', '')],
        'output_effects': [('sum', '', '', '')],
        'popped': lambda oparg, jump: 2,
        'pushed': lambda oparg, jump: 1,
        'instr_fmt': 'IXC',
    },
    'BINARY_OP_ADD_INT': {
        'input_effects': [('left', '', '', ''), ('right', '', '', '')],
        'output_effects': [('sum', '', '', '')],
        'popped': lambda oparg, jump: 2,
        'pushed': lambda oparg, jump: 1,
        'instr_fmt': 'IXC',
    },
    'BINARY_SUBSCR': {
        'input_effects': [('container', '', '', ''), ('sub', '', '', '')],
        'output_effects': [('res', '', '', '')],
        'popped': lambda oparg, jump: 2,
        'pushed': lambda oparg, jump: 1,
        'instr_fmt': 'IXC000',
    },
    'BINARY_SLICE': {
        'input_effects': [('container', '', '', ''), ('start', '', '', ''), ('stop', '', '', '')],
        'output_effects': [('res', '', '', '')],
        'popped': lambda oparg, jump: 3,
        'pushed': lambda oparg, jump: 1,
        'instr_fmt': 'IX',
    },
    'STORE_SLICE': {
        'input_effects': [('v', '', '', ''), ('container', '', '', ''), ('start', '', '', ''), ('stop', '', '', '')],
        'output_effects': [],
        'popped': lambda oparg, jump: 4,
        'pushed': lambda oparg, jump: 0,
        'instr_fmt': 'IX',
    },
    'BINARY_SUBSCR_LIST_INT': {
        'input_effects': [('list', '', '', ''), ('sub', '', '', '')],
        'output_effects': [('res', '', '', '')],
        'popped': lambda oparg, jump: 2,
        'pushed': lambda oparg, jump: 1,
        'instr_fmt': 'IXC000',
    },
    'BINARY_SUBSCR_TUPLE_INT': {
        'input_effects': [('tuple', '', '', ''), ('sub', '', '', '')],
        'output_effects': [('res', '', '', '')],
        'popped': lambda oparg, jump: 2,
        'pushed': lambda oparg, jump: 1,
        'instr_fmt': 'IXC000',
    },
    'BINARY_SUBSCR_DICT': {
        'input_effects': [('dict', '', '', ''), ('sub', '', '', '')],
        'output_effects': [('res', '', '', '')],
        'popped': lambda oparg, jump: 2,
        'pushed': lambda oparg, jump: 1,
        'instr_fmt': 'IXC000',
    },
    'BINARY_SUBSCR_GETITEM': {
        'input_effects': [('container', '', '', ''), ('sub', '', '', '')],
        'output_effects': [('unused', '', '', '')],
        'popped': lambda oparg, jump: 2,
        'pushed': lambda oparg, jump: 1,
        'instr_fmt': 'IXC000',
    },
    'LIST_APPEND': {
        'input_effects': [('list', '', '', ''), ('unused', 'oparg-1', 'PyObject **', ''), ('v', '', '', '')],
        'output_effects': [('list', '', '', ''), ('unused', 'oparg-1', 'PyObject **', '')],
        'popped': lambda oparg, jump: 2 + (oparg-1),
        'pushed': lambda oparg, jump: 1 + (oparg-1),
        'instr_fmt': 'IB',
    },
    'SET_ADD': {
        'input_effects': [('set', '', '', ''), ('unused', 'oparg-1', 'PyObject **', ''), ('v', '', '', '')],
        'output_effects': [('set', '', '', ''), ('unused', 'oparg-1', 'PyObject **', '')],
        'popped': lambda oparg, jump: 2 + (oparg-1),
        'pushed': lambda oparg, jump: 1 + (oparg-1),
        'instr_fmt': 'IB',
    },
    'STORE_SUBSCR': {
        'input_effects': [('v', '', '', ''), ('container', '', '', ''), ('sub', '', '', '')],
        'output_effects': [],
        'popped': lambda oparg, jump: 3,
        'pushed': lambda oparg, jump: 0,
        'instr_fmt': 'IXC',
    },
    'STORE_SUBSCR_LIST_INT': {
        'input_effects': [('value', '', '', ''), ('list', '', '', ''), ('sub', '', '', '')],
        'output_effects': [],
        'popped': lambda oparg, jump: 3,
        'pushed': lambda oparg, jump: 0,
        'instr_fmt': 'IXC',
    },
    'STORE_SUBSCR_DICT': {
        'input_effects': [('value', '', '', ''), ('dict', '', '', ''), ('sub', '', '', '')],
        'output_effects': [],
        'popped': lambda oparg, jump: 3,
        'pushed': lambda oparg, jump: 0,
        'instr_fmt': 'IXC',
    },
    'DELETE_SUBSCR': {
        'input_effects': [('container', '', '', ''), ('sub', '', '', '')],
        'output_effects': [],
        'popped': lambda oparg, jump: 2,
        'pushed': lambda oparg, jump: 0,
        'instr_fmt': 'IX',
    },
    'CALL_INTRINSIC_1': {
        'input_effects': [('value', '', '', '')],
        'output_effects': [('res', '', '', '')],
        'popped': lambda oparg, jump: 1,
        'pushed': lambda oparg, jump: 1,
        'instr_fmt': 'IB',
    },
    'CALL_INTRINSIC_2': {
        'input_effects': [('value2', '', '', ''), ('value1', '', '', '')],
        'output_effects': [('res', '', '', '')],
        'popped': lambda oparg, jump: 2,
        'pushed': lambda oparg, jump: 1,
        'instr_fmt': 'IB',
    },
    'RAISE_VARARGS': {
        'input_effects': [('args', 'oparg', 'PyObject **', '')],
        'output_effects': [],
        'popped': lambda oparg, jump: oparg,
        'pushed': lambda oparg, jump: 0,
        'instr_fmt': 'IB',
    },
    'INTERPRETER_EXIT': {
        'input_effects': [('retval', '', '', '')],
        'output_effects': [],
        'popped': lambda oparg, jump: 1,
        'pushed': lambda oparg, jump: 0,
        'instr_fmt': 'IX',
    },
    'RETURN_VALUE': {
        'input_effects': [('retval', '', '', '')],
        'output_effects': [],
        'popped': lambda oparg, jump: 1,
        'pushed': lambda oparg, jump: 0,
        'instr_fmt': 'IX',
    },
    'RETURN_CONST': {
        'input_effects': [],
        'output_effects': [],
        'popped': lambda oparg, jump: 0,
        'pushed': lambda oparg, jump: 0,
        'instr_fmt': 'IB',
    },
    'GET_AITER': {
        'input_effects': [('obj', '', '', '')],
        'output_effects': [('iter', '', '', '')],
        'popped': lambda oparg, jump: 1,
        'pushed': lambda oparg, jump: 1,
        'instr_fmt': 'IX',
    },
    'GET_ANEXT': {
        'input_effects': [('aiter', '', '', '')],
        'output_effects': [('aiter', '', '', ''), ('awaitable', '', '', '')],
        'popped': lambda oparg, jump: 1,
        'pushed': lambda oparg, jump: 2,
        'instr_fmt': 'IX',
    },
    'GET_AWAITABLE': {
        'input_effects': [('iterable', '', '', '')],
        'output_effects': [('iter', '', '', '')],
        'popped': lambda oparg, jump: 1,
        'pushed': lambda oparg, jump: 1,
        'instr_fmt': 'IB',
    },
    'SEND': {
        'input_effects': [('receiver', '', '', ''), ('v', '', '', '')],
        'output_effects': [('receiver', '', '', ''), ('retval', '', '', '')],
        'popped': lambda oparg, jump: 2,
        'pushed': lambda oparg, jump: 2,
        'instr_fmt': 'IBC',
    },
    'SEND_GEN': {
        'input_effects': [('receiver', '', '', ''), ('v', '', '', '')],
        'output_effects': [('receiver', '', '', '')],
        'popped': lambda oparg, jump: 2,
        'pushed': lambda oparg, jump: 1,
        'instr_fmt': 'IBC',
    },
    'YIELD_VALUE': {
        'input_effects': [('retval', '', '', '')],
        'output_effects': [('unused', '', '', '')],
        'popped': lambda oparg, jump: 1,
        'pushed': lambda oparg, jump: 1,
        'instr_fmt': 'IX',
    },
    'POP_EXCEPT': {
        'input_effects': [('exc_value', '', '', '')],
        'output_effects': [],
        'popped': lambda oparg, jump: 1,
        'pushed': lambda oparg, jump: 0,
        'instr_fmt': 'IX',
    },
    'RERAISE': {
        'input_effects': [('values', 'oparg', 'PyObject **', ''), ('exc', '', '', '')],
        'output_effects': [('values', 'oparg', 'PyObject **', '')],
        'popped': lambda oparg, jump: 1 + oparg,
        'pushed': lambda oparg, jump: oparg,
        'instr_fmt': 'IB',
    },
    'END_ASYNC_FOR': {
        'input_effects': [('awaitable', '', '', ''), ('exc', '', '', '')],
        'output_effects': [],
        'popped': lambda oparg, jump: 2,
        'pushed': lambda oparg, jump: 0,
        'instr_fmt': 'IX',
    },
    'CLEANUP_THROW': {
        'input_effects': [('sub_iter', '', '', ''), ('last_sent_val', '', '', ''), ('exc_value', '', '', '')],
        'output_effects': [('none', '', '', ''), ('value', '', '', '')],
        'popped': lambda oparg, jump: 3,
        'pushed': lambda oparg, jump: 2,
        'instr_fmt': 'IX',
    },
    'LOAD_ASSERTION_ERROR': {
        'input_effects': [],
        'output_effects': [('value', '', '', '')],
        'popped': lambda oparg, jump: 0,
        'pushed': lambda oparg, jump: 1,
        'instr_fmt': 'IX',
    },
    'LOAD_BUILD_CLASS': {
        'input_effects': [],
        'output_effects': [('bc', '', '', '')],
        'popped': lambda oparg, jump: 0,
        'pushed': lambda oparg, jump: 1,
        'instr_fmt': 'IX',
    },
    'STORE_NAME': {
        'input_effects': [('v', '', '', '')],
        'output_effects': [],
        'popped': lambda oparg, jump: 1,
        'pushed': lambda oparg, jump: 0,
        'instr_fmt': 'IB',
    },
    'DELETE_NAME': {
        'input_effects': [],
        'output_effects': [],
        'popped': lambda oparg, jump: 0,
        'pushed': lambda oparg, jump: 0,
        'instr_fmt': 'IB',
    },
    'UNPACK_SEQUENCE': {
        'input_effects': [('seq', '', '', '')],
        'output_effects': [('unused', 'oparg', 'PyObject **', '')],
        'popped': lambda oparg, jump: 1,
        'pushed': lambda oparg, jump: oparg,
        'instr_fmt': 'IBC',
    },
    'UNPACK_SEQUENCE_TWO_TUPLE': {
        'input_effects': [('seq', '', '', '')],
        'output_effects': [('values', 'oparg', 'PyObject **', '')],
        'popped': lambda oparg, jump: 1,
        'pushed': lambda oparg, jump: oparg,
        'instr_fmt': 'IBC',
    },
    'UNPACK_SEQUENCE_TUPLE': {
        'input_effects': [('seq', '', '', '')],
        'output_effects': [('values', 'oparg', 'PyObject **', '')],
        'popped': lambda oparg, jump: 1,
        'pushed': lambda oparg, jump: oparg,
        'instr_fmt': 'IBC',
    },
    'UNPACK_SEQUENCE_LIST': {
        'input_effects': [('seq', '', '', '')],
        'output_effects': [('values', 'oparg', 'PyObject **', '')],
        'popped': lambda oparg, jump: 1,
        'pushed': lambda oparg, jump: oparg,
        'instr_fmt': 'IBC',
    },
    'UNPACK_EX': {
        'input_effects': [('seq', '', '', '')],
        'output_effects': [('unused', 'oparg & 0xFF', 'PyObject **', ''), ('unused', '', '', ''), ('unused', 'oparg >> 8', 'PyObject **', '')],
        'popped': lambda oparg, jump: 1,
        'pushed': lambda oparg, jump: 1 + (oparg & 0xFF) + (oparg >> 8),
        'instr_fmt': 'IB',
    },
    'STORE_ATTR': {
        'input_effects': [('v', '', '', ''), ('owner', '', '', '')],
        'output_effects': [],
        'popped': lambda oparg, jump: 2,
        'pushed': lambda oparg, jump: 0,
        'instr_fmt': 'IBC000',
    },
    'DELETE_ATTR': {
        'input_effects': [('owner', '', '', '')],
        'output_effects': [],
        'popped': lambda oparg, jump: 1,
        'pushed': lambda oparg, jump: 0,
        'instr_fmt': 'IB',
    },
    'STORE_GLOBAL': {
        'input_effects': [('v', '', '', '')],
        'output_effects': [],
        'popped': lambda oparg, jump: 1,
        'pushed': lambda oparg, jump: 0,
        'instr_fmt': 'IB',
    },
    'DELETE_GLOBAL': {
        'input_effects': [],
        'output_effects': [],
        'popped': lambda oparg, jump: 0,
        'pushed': lambda oparg, jump: 0,
        'instr_fmt': 'IB',
    },
    'LOAD_NAME': {
        'input_effects': [],
        'output_effects': [('v', '', '', '')],
        'popped': lambda oparg, jump: 0,
        'pushed': lambda oparg, jump: 1,
        'instr_fmt': 'IB',
    },
    'LOAD_GLOBAL': {
        'input_effects': [],
        'output_effects': [('null', '', '', 'oparg & 1'), ('v', '', '', '')],
        'popped': lambda oparg, jump: 0,
        'pushed': lambda oparg, jump: 1 + (bool(oparg & 1)),
        'instr_fmt': 'IBC0000',
    },
    'LOAD_GLOBAL_MODULE': {
        'input_effects': [],
        'output_effects': [('null', '', '', 'oparg & 1'), ('res', '', '', '')],
        'popped': lambda oparg, jump: 0,
        'pushed': lambda oparg, jump: 1 + (bool(oparg & 1)),
        'instr_fmt': 'IBC0000',
    },
    'LOAD_GLOBAL_BUILTIN': {
        'input_effects': [],
        'output_effects': [('null', '', '', 'oparg & 1'), ('res', '', '', '')],
        'popped': lambda oparg, jump: 0,
        'pushed': lambda oparg, jump: 1 + (bool(oparg & 1)),
        'instr_fmt': 'IBC0000',
    },
    'DELETE_FAST': {
        'input_effects': [],
        'output_effects': [],
        'popped': lambda oparg, jump: 0,
        'pushed': lambda oparg, jump: 0,
        'instr_fmt': 'IB',
    },
    'MAKE_CELL': {
        'input_effects': [],
        'output_effects': [],
        'popped': lambda oparg, jump: 0,
        'pushed': lambda oparg, jump: 0,
        'instr_fmt': 'IB',
    },
    'DELETE_DEREF': {
        'input_effects': [],
        'output_effects': [],
        'popped': lambda oparg, jump: 0,
        'pushed': lambda oparg, jump: 0,
        'instr_fmt': 'IB',
    },
    'LOAD_CLASSDEREF': {
        'input_effects': [],
        'output_effects': [('value', '', '', '')],
        'popped': lambda oparg, jump: 0,
        'pushed': lambda oparg, jump: 1,
        'instr_fmt': 'IB',
    },
    'LOAD_DEREF': {
        'input_effects': [],
        'output_effects': [('value', '', '', '')],
        'popped': lambda oparg, jump: 0,
        'pushed': lambda oparg, jump: 1,
        'instr_fmt': 'IB',
    },
    'STORE_DEREF': {
        'input_effects': [('v', '', '', '')],
        'output_effects': [],
        'popped': lambda oparg, jump: 1,
        'pushed': lambda oparg, jump: 0,
        'instr_fmt': 'IB',
    },
    'COPY_FREE_VARS': {
        'input_effects': [],
        'output_effects': [],
        'popped': lambda oparg, jump: 0,
        'pushed': lambda oparg, jump: 0,
        'instr_fmt': 'IB',
    },
    'BUILD_STRING': {
        'input_effects': [('pieces', 'oparg', 'PyObject **', '')],
        'output_effects': [('str', '', '', '')],
        'popped': lambda oparg, jump: oparg,
        'pushed': lambda oparg, jump: 1,
        'instr_fmt': 'IB',
    },
    'BUILD_TUPLE': {
        'input_effects': [('values', 'oparg', 'PyObject **', '')],
        'output_effects': [('tup', '', '', '')],
        'popped': lambda oparg, jump: oparg,
        'pushed': lambda oparg, jump: 1,
        'instr_fmt': 'IB',
    },
    'BUILD_LIST': {
        'input_effects': [('values', 'oparg', 'PyObject **', '')],
        'output_effects': [('list', '', '', '')],
        'popped': lambda oparg, jump: oparg,
        'pushed': lambda oparg, jump: 1,
        'instr_fmt': 'IB',
    },
    'LIST_EXTEND': {
        'input_effects': [('list', '', '', ''), ('unused', 'oparg-1', 'PyObject **', ''), ('iterable', '', '', '')],
        'output_effects': [('list', '', '', ''), ('unused', 'oparg-1', 'PyObject **', '')],
        'popped': lambda oparg, jump: 2 + (oparg-1),
        'pushed': lambda oparg, jump: 1 + (oparg-1),
        'instr_fmt': 'IB',
    },
    'SET_UPDATE': {
        'input_effects': [('set', '', '', ''), ('unused', 'oparg-1', 'PyObject **', ''), ('iterable', '', '', '')],
        'output_effects': [('set', '', '', ''), ('unused', 'oparg-1', 'PyObject **', '')],
        'popped': lambda oparg, jump: 2 + (oparg-1),
        'pushed': lambda oparg, jump: 1 + (oparg-1),
        'instr_fmt': 'IB',
    },
    'BUILD_SET': {
        'input_effects': [('values', 'oparg', 'PyObject **', '')],
        'output_effects': [('set', '', '', '')],
        'popped': lambda oparg, jump: oparg,
        'pushed': lambda oparg, jump: 1,
        'instr_fmt': 'IB',
    },
    'BUILD_MAP': {
        'input_effects': [('values', 'oparg*2', 'PyObject **', '')],
        'output_effects': [('map', '', '', '')],
        'popped': lambda oparg, jump: oparg*2,
        'pushed': lambda oparg, jump: 1,
        'instr_fmt': 'IB',
    },
    'SETUP_ANNOTATIONS': {
        'input_effects': [],
        'output_effects': [],
        'popped': lambda oparg, jump: 0,
        'pushed': lambda oparg, jump: 0,
        'instr_fmt': 'IX',
    },
    'BUILD_CONST_KEY_MAP': {
        'input_effects': [('values', 'oparg', 'PyObject **', ''), ('keys', '', '', '')],
        'output_effects': [('map', '', '', '')],
        'popped': lambda oparg, jump: 1 + oparg,
        'pushed': lambda oparg, jump: 1,
        'instr_fmt': 'IB',
    },
    'DICT_UPDATE': {
        'input_effects': [('update', '', '', '')],
        'output_effects': [],
        'popped': lambda oparg, jump: 1,
        'pushed': lambda oparg, jump: 0,
        'instr_fmt': 'IB',
    },
    'DICT_MERGE': {
        'input_effects': [('update', '', '', '')],
        'output_effects': [],
        'popped': lambda oparg, jump: 1,
        'pushed': lambda oparg, jump: 0,
        'instr_fmt': 'IB',
    },
    'MAP_ADD': {
        'input_effects': [('key', '', '', ''), ('value', '', '', '')],
        'output_effects': [],
        'popped': lambda oparg, jump: 2,
        'pushed': lambda oparg, jump: 0,
        'instr_fmt': 'IB',
    },
    'LOAD_ATTR': {
        'input_effects': [('owner', '', '', '')],
        'output_effects': [('res2', '', '', 'oparg & 1'), ('res', '', '', '')],
        'popped': lambda oparg, jump: 1,
        'pushed': lambda oparg, jump: 1 + (bool(oparg & 1)),
        'instr_fmt': 'IBC00000000',
    },
    'LOAD_ATTR_INSTANCE_VALUE': {
        'input_effects': [('owner', '', '', '')],
        'output_effects': [('res2', '', '', 'oparg & 1'), ('res', '', '', '')],
        'popped': lambda oparg, jump: 1,
        'pushed': lambda oparg, jump: 1 + (bool(oparg & 1)),
        'instr_fmt': 'IBC00000000',
    },
    'LOAD_ATTR_MODULE': {
        'input_effects': [('owner', '', '', '')],
        'output_effects': [('res2', '', '', 'oparg & 1'), ('res', '', '', '')],
        'popped': lambda oparg, jump: 1,
        'pushed': lambda oparg, jump: 1 + (bool(oparg & 1)),
        'instr_fmt': 'IBC00000000',
    },
    'LOAD_ATTR_WITH_HINT': {
        'input_effects': [('owner', '', '', '')],
        'output_effects': [('res2', '', '', 'oparg & 1'), ('res', '', '', '')],
        'popped': lambda oparg, jump: 1,
        'pushed': lambda oparg, jump: 1 + (bool(oparg & 1)),
        'instr_fmt': 'IBC00000000',
    },
    'LOAD_ATTR_SLOT': {
        'input_effects': [('owner', '', '', '')],
        'output_effects': [('res2', '', '', 'oparg & 1'), ('res', '', '', '')],
        'popped': lambda oparg, jump: 1,
        'pushed': lambda oparg, jump: 1 + (bool(oparg & 1)),
        'instr_fmt': 'IBC00000000',
    },
    'LOAD_ATTR_CLASS': {
        'input_effects': [('cls', '', '', '')],
        'output_effects': [('res2', '', '', 'oparg & 1'), ('res', '', '', '')],
        'popped': lambda oparg, jump: 1,
        'pushed': lambda oparg, jump: 1 + (bool(oparg & 1)),
        'instr_fmt': 'IBC00000000',
    },
    'LOAD_ATTR_PROPERTY': {
        'input_effects': [('owner', '', '', '')],
        'output_effects': [('unused', '', '', 'oparg & 1'), ('unused', '', '', '')],
        'popped': lambda oparg, jump: 1,
        'pushed': lambda oparg, jump: 1 + (bool(oparg & 1)),
        'instr_fmt': 'IBC00000000',
    },
    'LOAD_ATTR_GETATTRIBUTE_OVERRIDDEN': {
        'input_effects': [('owner', '', '', '')],
        'output_effects': [('unused', '', '', 'oparg & 1'), ('unused', '', '', '')],
        'popped': lambda oparg, jump: 1,
        'pushed': lambda oparg, jump: 1 + (bool(oparg & 1)),
        'instr_fmt': 'IBC00000000',
    },
    'STORE_ATTR_INSTANCE_VALUE': {
        'input_effects': [('value', '', '', ''), ('owner', '', '', '')],
        'output_effects': [],
        'popped': lambda oparg, jump: 2,
        'pushed': lambda oparg, jump: 0,
        'instr_fmt': 'IXC000',
    },
    'STORE_ATTR_WITH_HINT': {
        'input_effects': [('value', '', '', ''), ('owner', '', '', '')],
        'output_effects': [],
        'popped': lambda oparg, jump: 2,
        'pushed': lambda oparg, jump: 0,
        'instr_fmt': 'IBC000',
    },
    'STORE_ATTR_SLOT': {
        'input_effects': [('value', '', '', ''), ('owner', '', '', '')],
        'output_effects': [],
        'popped': lambda oparg, jump: 2,
        'pushed': lambda oparg, jump: 0,
        'instr_fmt': 'IXC000',
    },
    'COMPARE_OP': {
        'input_effects': [('left', '', '', ''), ('right', '', '', '')],
        'output_effects': [('res', '', '', '')],
        'popped': lambda oparg, jump: 2,
        'pushed': lambda oparg, jump: 1,
        'instr_fmt': 'IBC',
    },
    'COMPARE_AND_BRANCH': {
        'input_effects': [('left', '', '', ''), ('right', '', '', '')],
        'output_effects': [],
        'popped': lambda oparg, jump: 2,
        'pushed': lambda oparg, jump: 0,
        'instr_fmt': 'IBC0',
    },
    'COMPARE_AND_BRANCH_FLOAT': {
        'input_effects': [('left', '', '', ''), ('right', '', '', '')],
        'output_effects': [],
        'popped': lambda oparg, jump: 2,
        'pushed': lambda oparg, jump: 0,
        'instr_fmt': 'IBC0',
    },
    'COMPARE_AND_BRANCH_INT': {
        'input_effects': [('left', '', '', ''), ('right', '', '', '')],
        'output_effects': [],
        'popped': lambda oparg, jump: 2,
        'pushed': lambda oparg, jump: 0,
        'instr_fmt': 'IBC0',
    },
    'COMPARE_AND_BRANCH_STR': {
        'input_effects': [('left', '', '', ''), ('right', '', '', '')],
        'output_effects': [],
        'popped': lambda oparg, jump: 2,
        'pushed': lambda oparg, jump: 0,
        'instr_fmt': 'IBC0',
    },
    'IS_OP': {
        'input_effects': [('left', '', '', ''), ('right', '', '', '')],
        'output_effects': [('b', '', '', '')],
        'popped': lambda oparg, jump: 2,
        'pushed': lambda oparg, jump: 1,
        'instr_fmt': 'IB',
    },
    'CONTAINS_OP': {
        'input_effects': [('left', '', '', ''), ('right', '', '', '')],
        'output_effects': [('b', '', '', '')],
        'popped': lambda oparg, jump: 2,
        'pushed': lambda oparg, jump: 1,
        'instr_fmt': 'IB',
    },
    'CHECK_EG_MATCH': {
        'input_effects': [('exc_value', '', '', ''), ('match_type', '', '', '')],
        'output_effects': [('rest', '', '', ''), ('match', '', '', '')],
        'popped': lambda oparg, jump: 2,
        'pushed': lambda oparg, jump: 2,
        'instr_fmt': 'IX',
    },
    'CHECK_EXC_MATCH': {
        'input_effects': [('left', '', '', ''), ('right', '', '', '')],
        'output_effects': [('left', '', '', ''), ('b', '', '', '')],
        'popped': lambda oparg, jump: 2,
        'pushed': lambda oparg, jump: 2,
        'instr_fmt': 'IX',
    },
    'IMPORT_NAME': {
        'input_effects': [('level', '', '', ''), ('fromlist', '', '', '')],
        'output_effects': [('res', '', '', '')],
        'popped': lambda oparg, jump: 2,
        'pushed': lambda oparg, jump: 1,
        'instr_fmt': 'IB',
    },
    'IMPORT_FROM': {
        'input_effects': [('from', '', '', '')],
        'output_effects': [('from', '', '', ''), ('res', '', '', '')],
        'popped': lambda oparg, jump: 1,
        'pushed': lambda oparg, jump: 2,
        'instr_fmt': 'IB',
    },
    'JUMP_FORWARD': {
        'input_effects': [],
        'output_effects': [],
        'popped': lambda oparg, jump: 0,
        'pushed': lambda oparg, jump: 0,
        'instr_fmt': 'IB',
    },
    'JUMP_BACKWARD': {
        'input_effects': [],
        'output_effects': [],
        'popped': lambda oparg, jump: 0,
        'pushed': lambda oparg, jump: 0,
        'instr_fmt': 'IB',
    },
    'POP_JUMP_IF_FALSE': {
        'input_effects': [('cond', '', '', '')],
        'output_effects': [],
        'popped': lambda oparg, jump: 1,
        'pushed': lambda oparg, jump: 0,
        'instr_fmt': 'IB',
    },
    'POP_JUMP_IF_TRUE': {
        'input_effects': [('cond', '', '', '')],
        'output_effects': [],
        'popped': lambda oparg, jump: 1,
        'pushed': lambda oparg, jump: 0,
        'instr_fmt': 'IB',
    },
    'POP_JUMP_IF_NOT_NONE': {
        'input_effects': [('value', '', '', '')],
        'output_effects': [],
        'popped': lambda oparg, jump: 1,
        'pushed': lambda oparg, jump: 0,
        'instr_fmt': 'IB',
    },
    'POP_JUMP_IF_NONE': {
        'input_effects': [('value', '', '', '')],
        'output_effects': [],
        'popped': lambda oparg, jump: 1,
        'pushed': lambda oparg, jump: 0,
        'instr_fmt': 'IB',
    },
    'JUMP_IF_FALSE_OR_POP': {
        'input_effects': [('cond', '', '', '')],
        'output_effects': [('cond', '', '', 'jump')],
        'popped': lambda oparg, jump: 1,
        'pushed': lambda oparg, jump: (bool(jump)),
        'instr_fmt': 'IB',
    },
    'JUMP_IF_TRUE_OR_POP': {
        'input_effects': [('cond', '', '', '')],
        'output_effects': [('cond', '', '', 'jump')],
        'popped': lambda oparg, jump: 1,
        'pushed': lambda oparg, jump: (bool(jump)),
        'instr_fmt': 'IB',
    },
    'JUMP_BACKWARD_NO_INTERRUPT': {
        'input_effects': [],
        'output_effects': [],
        'popped': lambda oparg, jump: 0,
        'pushed': lambda oparg, jump: 0,
        'instr_fmt': 'IB',
    },
    'GET_LEN': {
        'input_effects': [('obj', '', '', '')],
        'output_effects': [('obj', '', '', ''), ('len_o', '', '', '')],
        'popped': lambda oparg, jump: 1,
        'pushed': lambda oparg, jump: 2,
        'instr_fmt': 'IX',
    },
    'MATCH_CLASS': {
        'input_effects': [('subject', '', '', ''), ('type', '', '', ''), ('names', '', '', '')],
        'output_effects': [('attrs', '', '', '')],
        'popped': lambda oparg, jump: 3,
        'pushed': lambda oparg, jump: 1,
        'instr_fmt': 'IB',
    },
    'MATCH_MAPPING': {
        'input_effects': [('subject', '', '', '')],
        'output_effects': [('subject', '', '', ''), ('res', '', '', '')],
        'popped': lambda oparg, jump: 1,
        'pushed': lambda oparg, jump: 2,
        'instr_fmt': 'IX',
    },
    'MATCH_SEQUENCE': {
        'input_effects': [('subject', '', '', '')],
        'output_effects': [('subject', '', '', ''), ('res', '', '', '')],
        'popped': lambda oparg, jump: 1,
        'pushed': lambda oparg, jump: 2,
        'instr_fmt': 'IX',
    },
    'MATCH_KEYS': {
        'input_effects': [('subject', '', '', ''), ('keys', '', '', '')],
        'output_effects': [('subject', '', '', ''), ('keys', '', '', ''), ('values_or_none', '', '', '')],
        'popped': lambda oparg, jump: 2,
        'pushed': lambda oparg, jump: 3,
        'instr_fmt': 'IX',
    },
    'GET_ITER': {
        'input_effects': [('iterable', '', '', '')],
        'output_effects': [('iter', '', '', '')],
        'popped': lambda oparg, jump: 1,
        'pushed': lambda oparg, jump: 1,
        'instr_fmt': 'IX',
    },
    'GET_YIELD_FROM_ITER': {
        'input_effects': [('iterable', '', '', '')],
        'output_effects': [('iter', '', '', '')],
        'popped': lambda oparg, jump: 1,
        'pushed': lambda oparg, jump: 1,
        'instr_fmt': 'IX',
    },
    'FOR_ITER': {
        'input_effects': [('iter', '', '', '')],
        'output_effects': [('iter', '', '', ''), ('next', '', '', '')],
        'popped': lambda oparg, jump: 1,
        'pushed': lambda oparg, jump: 2,
        'instr_fmt': 'IBC',
    },
    'FOR_ITER_LIST': {
        'input_effects': [('iter', '', '', '')],
        'output_effects': [('iter', '', '', ''), ('next', '', '', '')],
        'popped': lambda oparg, jump: 1,
        'pushed': lambda oparg, jump: 2,
        'instr_fmt': 'IBC',
    },
    'FOR_ITER_TUPLE': {
        'input_effects': [('iter', '', '', '')],
        'output_effects': [('iter', '', '', ''), ('next', '', '', '')],
        'popped': lambda oparg, jump: 1,
        'pushed': lambda oparg, jump: 2,
        'instr_fmt': 'IBC',
    },
    'FOR_ITER_RANGE': {
        'input_effects': [('iter', '', '', '')],
        'output_effects': [('iter', '', '', ''), ('unused', '', '', '')],
        'popped': lambda oparg, jump: 1,
        'pushed': lambda oparg, jump: 2,
        'instr_fmt': 'IBC',
    },
    'FOR_ITER_GEN': {
        'input_effects': [('iter', '', '', '')],
        'output_effects': [('iter', '', '', ''), ('unused', '', '', '')],
        'popped': lambda oparg, jump: 1,
        'pushed': lambda oparg, jump: 2,
        'instr_fmt': 'IBC',
    },
    'BEFORE_ASYNC_WITH': {
        'input_effects': [('mgr', '', '', '')],
        'output_effects': [('exit', '', '', ''), ('res', '', '', '')],
        'popped': lambda oparg, jump: 1,
        'pushed': lambda oparg, jump: 2,
        'instr_fmt': 'IX',
    },
    'BEFORE_WITH': {
        'input_effects': [('mgr', '', '', '')],
        'output_effects': [('exit', '', '', ''), ('res', '', '', '')],
        'popped': lambda oparg, jump: 1,
        'pushed': lambda oparg, jump: 2,
        'instr_fmt': 'IX',
    },
    'WITH_EXCEPT_START': {
        'input_effects': [('exit_func', '', '', ''), ('lasti', '', '', ''), ('unused', '', '', ''), ('val', '', '', '')],
        'output_effects': [('exit_func', '', '', ''), ('lasti', '', '', ''), ('unused', '', '', ''), ('val', '', '', ''), ('res', '', '', '')],
        'popped': lambda oparg, jump: 4,
        'pushed': lambda oparg, jump: 5,
        'instr_fmt': 'IX',
    },
    'PUSH_EXC_INFO': {
        'input_effects': [('new_exc', '', '', '')],
        'output_effects': [('prev_exc', '', '', ''), ('new_exc', '', '', '')],
        'popped': lambda oparg, jump: 1,
        'pushed': lambda oparg, jump: 2,
        'instr_fmt': 'IX',
    },
    'LOAD_ATTR_METHOD_WITH_VALUES': {
        'input_effects': [('self', '', '', '')],
        'output_effects': [('res2', '', '', 'oparg & 1'), ('res', '', '', '')],
        'popped': lambda oparg, jump: 1,
        'pushed': lambda oparg, jump: 1 + (bool(oparg & 1)),
        'instr_fmt': 'IBC00000000',
    },
    'LOAD_ATTR_METHOD_NO_DICT': {
        'input_effects': [('self', '', '', '')],
        'output_effects': [('res2', '', '', 'oparg & 1'), ('res', '', '', '')],
        'popped': lambda oparg, jump: 1,
        'pushed': lambda oparg, jump: 1 + (bool(oparg & 1)),
        'instr_fmt': 'IBC00000000',
    },
    'LOAD_ATTR_METHOD_LAZY_DICT': {
        'input_effects': [('self', '', '', '')],
        'output_effects': [('res2', '', '', 'oparg & 1'), ('res', '', '', '')],
        'popped': lambda oparg, jump: 1,
        'pushed': lambda oparg, jump: 1 + (bool(oparg & 1)),
        'instr_fmt': 'IBC00000000',
    },
    'KW_NAMES': {
        'input_effects': [],
        'output_effects': [],
        'popped': lambda oparg, jump: 0,
        'pushed': lambda oparg, jump: 0,
        'instr_fmt': 'IB',
    },
    'CALL': {
        'input_effects': [('method', '', '', ''), ('callable', '', '', ''), ('args', 'oparg', 'PyObject **', '')],
        'output_effects': [('res', '', '', '')],
        'popped': lambda oparg, jump: 2 + oparg,
        'pushed': lambda oparg, jump: 1,
        'instr_fmt': 'IBC000',
    },
    'CALL_BOUND_METHOD_EXACT_ARGS': {
        'input_effects': [('method', '', '', ''), ('callable', '', '', ''), ('unused', 'oparg', 'PyObject **', '')],
        'output_effects': [('unused', '', '', '')],
        'popped': lambda oparg, jump: 2 + oparg,
        'pushed': lambda oparg, jump: 1,
        'instr_fmt': 'IBC000',
    },
    'CALL_PY_EXACT_ARGS': {
        'input_effects': [('method', '', '', ''), ('callable', '', '', ''), ('args', 'oparg', 'PyObject **', '')],
        'output_effects': [('unused', '', '', '')],
        'popped': lambda oparg, jump: 2 + oparg,
        'pushed': lambda oparg, jump: 1,
        'instr_fmt': 'IBC000',
    },
    'CALL_PY_WITH_DEFAULTS': {
        'input_effects': [('method', '', '', ''), ('callable', '', '', ''), ('args', 'oparg', 'PyObject **', '')],
        'output_effects': [('unused', '', '', '')],
        'popped': lambda oparg, jump: 2 + oparg,
        'pushed': lambda oparg, jump: 1,
        'instr_fmt': 'IBC000',
    },
    'CALL_NO_KW_TYPE_1': {
        'input_effects': [('null', '', '', ''), ('callable', '', '', ''), ('args', 'oparg', 'PyObject **', '')],
        'output_effects': [('res', '', '', '')],
        'popped': lambda oparg, jump: 2 + oparg,
        'pushed': lambda oparg, jump: 1,
        'instr_fmt': 'IBC000',
    },
    'CALL_NO_KW_STR_1': {
        'input_effects': [('null', '', '', ''), ('callable', '', '', ''), ('args', 'oparg', 'PyObject **', '')],
        'output_effects': [('res', '', '', '')],
        'popped': lambda oparg, jump: 2 + oparg,
        'pushed': lambda oparg, jump: 1,
        'instr_fmt': 'IBC000',
    },
    'CALL_NO_KW_TUPLE_1': {
        'input_effects': [('null', '', '', ''), ('callable', '', '', ''), ('args', 'oparg', 'PyObject **', '')],
        'output_effects': [('res', '', '', '')],
        'popped': lambda oparg, jump: 2 + oparg,
        'pushed': lambda oparg, jump: 1,
        'instr_fmt': 'IBC000',
    },
    'CALL_BUILTIN_CLASS': {
        'input_effects': [('method', '', '', ''), ('callable', '', '', ''), ('args', 'oparg', 'PyObject **', '')],
        'output_effects': [('res', '', '', '')],
        'popped': lambda oparg, jump: 2 + oparg,
        'pushed': lambda oparg, jump: 1,
        'instr_fmt': 'IBC000',
    },
    'CALL_NO_KW_BUILTIN_O': {
        'input_effects': [('method', '', '', ''), ('callable', '', '', ''), ('args', 'oparg', 'PyObject **', '')],
        'output_effects': [('res', '', '', '')],
        'popped': lambda oparg, jump: 2 + oparg,
        'pushed': lambda oparg, jump: 1,
        'instr_fmt': 'IBC000',
    },
    'CALL_NO_KW_BUILTIN_FAST': {
        'input_effects': [('method', '', '', ''), ('callable', '', '', ''), ('args', 'oparg', 'PyObject **', '')],
        'output_effects': [('res', '', '', '')],
        'popped': lambda oparg, jump: 2 + oparg,
        'pushed': lambda oparg, jump: 1,
        'instr_fmt': 'IBC000',
    },
    'CALL_BUILTIN_FAST_WITH_KEYWORDS': {
        'input_effects': [('method', '', '', ''), ('callable', '', '', ''), ('args', 'oparg', 'PyObject **', '')],
        'output_effects': [('res', '', '', '')],
        'popped': lambda oparg, jump: 2 + oparg,
        'pushed': lambda oparg, jump: 1,
        'instr_fmt': 'IBC000',
    },
    'CALL_NO_KW_LEN': {
        'input_effects': [('method', '', '', ''), ('callable', '', '', ''), ('args', 'oparg', 'PyObject **', '')],
        'output_effects': [('res', '', '', '')],
        'popped': lambda oparg, jump: 2 + oparg,
        'pushed': lambda oparg, jump: 1,
        'instr_fmt': 'IBC000',
    },
    'CALL_NO_KW_ISINSTANCE': {
        'input_effects': [('method', '', '', ''), ('callable', '', '', ''), ('args', 'oparg', 'PyObject **', '')],
        'output_effects': [('res', '', '', '')],
        'popped': lambda oparg, jump: 2 + oparg,
        'pushed': lambda oparg, jump: 1,
        'instr_fmt': 'IBC000',
    },
    'CALL_NO_KW_LIST_APPEND': {
        'input_effects': [('method', '', '', ''), ('self', '', '', ''), ('args', 'oparg', 'PyObject **', '')],
        'output_effects': [('unused', '', '', '')],
        'popped': lambda oparg, jump: 2 + oparg,
        'pushed': lambda oparg, jump: 1,
        'instr_fmt': 'IBC000',
    },
    'CALL_NO_KW_METHOD_DESCRIPTOR_O': {
        'input_effects': [('method', '', '', ''), ('unused', '', '', ''), ('args', 'oparg', 'PyObject **', '')],
        'output_effects': [('res', '', '', '')],
        'popped': lambda oparg, jump: 2 + oparg,
        'pushed': lambda oparg, jump: 1,
        'instr_fmt': 'IBC000',
    },
    'CALL_METHOD_DESCRIPTOR_FAST_WITH_KEYWORDS': {
        'input_effects': [('method', '', '', ''), ('unused', '', '', ''), ('args', 'oparg', 'PyObject **', '')],
        'output_effects': [('res', '', '', '')],
        'popped': lambda oparg, jump: 2 + oparg,
        'pushed': lambda oparg, jump: 1,
        'instr_fmt': 'IBC000',
    },
    'CALL_NO_KW_METHOD_DESCRIPTOR_NOARGS': {
        'input_effects': [('method', '', '', ''), ('unused', '', '', ''), ('args', 'oparg', 'PyObject **', '')],
        'output_effects': [('res', '', '', '')],
        'popped': lambda oparg, jump: 2 + oparg,
        'pushed': lambda oparg, jump: 1,
        'instr_fmt': 'IBC000',
    },
    'CALL_NO_KW_METHOD_DESCRIPTOR_FAST': {
        'input_effects': [('method', '', '', ''), ('unused', '', '', ''), ('args', 'oparg', 'PyObject **', '')],
        'output_effects': [('res', '', '', '')],
        'popped': lambda oparg, jump: 2 + oparg,
        'pushed': lambda oparg, jump: 1,
        'instr_fmt': 'IBC000',
    },
    'CALL_FUNCTION_EX': {
        'input_effects': [('unused', '', '', ''), ('func', '', '', ''), ('callargs', '', '', ''), ('kwargs', '', '', 'oparg & 1')],
        'output_effects': [('result', '', '', '')],
        'popped': lambda oparg, jump: 3 + (bool(oparg & 1)),
        'pushed': lambda oparg, jump: 1,
        'instr_fmt': 'IB',
    },
    'MAKE_FUNCTION': {
        'input_effects': [('defaults', '', '', 'oparg & 0x01'), ('kwdefaults', '', '', 'oparg & 0x02'), ('annotations', '', '', 'oparg & 0x04'), ('closure', '', '', 'oparg & 0x08'), ('codeobj', '', '', '')],
        'output_effects': [('func', '', '', '')],
        'popped': lambda oparg, jump: 1 + (bool(oparg & 0x01)) + (bool(oparg & 0x02)) + (bool(oparg & 0x04)) + (bool(oparg & 0x08)),
        'pushed': lambda oparg, jump: 1,
        'instr_fmt': 'IB',
    },
    'RETURN_GENERATOR': {
        'input_effects': [],
        'output_effects': [],
        'popped': lambda oparg, jump: 0,
        'pushed': lambda oparg, jump: 0,
        'instr_fmt': 'IX',
    },
    'BUILD_SLICE': {
        'input_effects': [('start', '', '', ''), ('stop', '', '', ''), ('step', '', '', 'oparg == 3')],
        'output_effects': [('slice', '', '', '')],
        'popped': lambda oparg, jump: 2 + (bool(oparg == 3)),
        'pushed': lambda oparg, jump: 1,
        'instr_fmt': 'IB',
    },
    'FORMAT_VALUE': {
        'input_effects': [('value', '', '', ''), ('fmt_spec', '', '', '(oparg & FVS_MASK) == FVS_HAVE_SPEC')],
        'output_effects': [('result', '', '', '')],
        'popped': lambda oparg, jump: 1 + (bool((oparg & FVS_MASK) == FVS_HAVE_SPEC)),
        'pushed': lambda oparg, jump: 1,
        'instr_fmt': 'IB',
    },
    'COPY': {
        'input_effects': [('bottom', '', '', ''), ('unused', 'oparg-1', 'PyObject **', '')],
        'output_effects': [('bottom', '', '', ''), ('unused', 'oparg-1', 'PyObject **', ''), ('top', '', '', '')],
        'popped': lambda oparg, jump: 1 + (oparg-1),
        'pushed': lambda oparg, jump: 2 + (oparg-1),
        'instr_fmt': 'IB',
    },
    'BINARY_OP': {
        'input_effects': [('lhs', '', '', ''), ('rhs', '', '', '')],
        'output_effects': [('res', '', '', '')],
        'popped': lambda oparg, jump: 2,
        'pushed': lambda oparg, jump: 1,
        'instr_fmt': 'IBC',
    },
    'SWAP': {
        'input_effects': [('bottom', '', '', ''), ('unused', 'oparg-2', 'PyObject **', ''), ('top', '', '', '')],
        'output_effects': [('top', '', '', ''), ('unused', 'oparg-2', 'PyObject **', ''), ('bottom', '', '', '')],
        'popped': lambda oparg, jump: 2 + (oparg-2),
        'pushed': lambda oparg, jump: 2 + (oparg-2),
        'instr_fmt': 'IB',
    },
    'EXTENDED_ARG': {
        'input_effects': [],
        'output_effects': [],
        'popped': lambda oparg, jump: 0,
        'pushed': lambda oparg, jump: 0,
        'instr_fmt': 'IB',
    },
    'CACHE': {
        'input_effects': [],
        'output_effects': [],
        'popped': lambda oparg, jump: 0,
        'pushed': lambda oparg, jump: 0,
        'instr_fmt': 'IX',
    },
    'END_FOR': {
        'popped': lambda oparg, jump: 1 + 1,
        'pushed': lambda oparg, jump: 0 + 0,
        'instr_fmt': 'IB',
    },
}
