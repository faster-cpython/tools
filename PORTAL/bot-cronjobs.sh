#!/usr/bin/env bash

script=$(realpath $0)
portal=$(dirname $script)
bot_root=$HOME/BOT
bot_logs=$bot_root/logs

jobs=(
    'weekly-main'
)


function install() {
    echo '## installing cronjobs ##'
    echo
    if crontab -l &>/dev/null; then
        >&2 echo 'ERROR: benchmarking cron job already installed:'
        crontab -l
        exit 1
    fi

    mkdir -p $bot_root
    mkdir -p $bot_logs

    # Generate the cron tab and scripts.
    utcnow=$(date -u)
    cat <<EOF > $bot_root/cronjobs
# generated by $script ($utcnow)):
SHELL=/bin/bash
EOF
    for name in "${jobs[@]}"; do
        local actual_script=$portal/bot-$name.sh
        local bot_script=$bot_root/cronjob-$name.sh
        cat <<EOF > $bot_script
#!/usr/bin/env bash
# generated by $script ($utcnow))
utcnow=\$(date -u +'%Y%m%d-%H%M%S')
bash $actual_script > $bot_logs/$name-\$utcnow.log 2>&1
EOF
        local when=
        if [ $name = 'weekly-main' ]; then
            note='Run benchmarks for the latest "main" commit every Sunday morning (UTC).'
            #when='* * * * *'
            when='0 2 * * sun'
        else
            >&2 echo 'ERROR: unexpected job $name'
            rm -f $bot_root/cronjobs
            exit 1
        fi
        echo "# $note" >> $bot_root/cronjobs
        echo "$when bash $bot_script" >> $bot_root/cronjobs
    done
    cat <<EOF >> $bot_root/cronjobs
# end generated ($script)
EOF

    # Install the cron jobs.
    if crontab $bot_root/cronjobs; then
        echo 'cron jobs installed:'
        crontab -l
    fi
}


function uninstall() {
    echo '## uninstalling cronjobs ##'
    echo

    # First remove the cron tab.
    if ! crontab -l &>/dev/null; then
        >&2 echo 'WARNING: benchmarking cron job not installed'
        exit 0
    fi
    crontab -r
    rm -f $bot_root/cronjobs

    # Then remove the scripts.
    rm -f $bot_root/cronjob-*.sh
}


#############################
# the script

if [ "$USER" != 'benchmarking' ]; then
    >&2 echo "ERROR: must be benchmarking user, not $USER"
    exit 1
fi

if [ "$1" = 'install' ]; then
    install
    exit 0
elif [ "$1" = 'uninstall' ]; then
    uninstall
    exit 0
elif [ -n "$1" ]; then
    >&2 echo "ERROR: unsupported command ($1)"
    exit 1
else
    >&2 echo 'ERROR: missing command'
    exit 1
fi
