Directory structure:

~$LOCAL_BENCH_USER/
   |- .ssh/
   |   |- authorized_keys   - holds the public key for the SSH tunnel *from* the bench host
   |
   |- BENCH/
   |   |- REQUESTS/         - data for requests to run on the bench host
   |   |   |- req-*/...     - info for each request (see below)
   |   |   |
   |   |   |- CURRENT       - a symlink to the req dir for the currently running/pending request
   |   |
   |   |- TEMPLATES/        - examples of requests (like in ~/.bench/REQUESTS)
   |   |
   |   |- jobs.json         - (private) the config file for request machinery on the portal host
   |   |- run-bench.py      - a convenience script for running the benchmark suite
   |   |- .bashrc-common.sh - a script sourced in other users' .bashrc files


As well, each user has the following set up (via BENCH/.bashrc-common.sh):

env vars:
   * LOCAL_BENCH_USER - the local user where requests are centralized
   * LOCAL_BENCH_DIR  - the directory where benchmarking-related tools & data are located
   * BENCH_USER       - the username for the bench host tunnel
   * BENCH_HOST       - the hostname for the bench host tunnel
   * BENCH_PORT       - the port for the bench host tunnel
   * BENCH_CONN       - a convenience for SCP commands ($BENCH_USER@$BENCH_HOST)
aliases:
   * run on portal host:                bench COMMAND ...
   * run on portal host (same CWD):     bench-cwd COMMAND ...
   * run on bench host:                 bench-ssh COMMAND ...
   * copy portal -> bench:              bench-scp localfile $BENCH_CONN:target
   * copy bench -> portal:              bench-scp $BENCH_CONN:source localfile

Note that those aliases all preserve $SSH_AUTH_SOCK and set $SUDO_PWD.


To run the benchmark suite:

1. create a compile config file (e.g. compile.ini)
2. copy it to the bench host:
   > bench-scp compile.ini $BENCH_CONN:BENCH/REQUESTS/req-12345-esnow/
3. run the command:
   > bench-ssh
   > pushd BENCH/repositories/cpython
   > git remote add ericsnowcurrently https://github.com/ericsnowcurrently/cpython
   > git fetch ericsnowcurrently
   > git checkout my-branch
   > popd
   > PYTHONPATH=~/BENCH/repositories/pyperformance \
         python3.9 -m pyperformance compile \
         BENCH/REQUESTS/req-12345-esnow/e.ini \
         a712b7311 \
         my-branch
   > exit
   > bench-scp $BENCH_CONN:$MY_RESULTS_DIR/*.json.gz .

You will find some examples in the BENCH/TEMPLATES directory.


To simplify this process, you can also use the BENCH/run-bench.py script:

> bench python3.9 $LOCAL_BENCH_DIR/run-bench.py --remote ericsnowcurrently --branch my-branch a712b7311


Using the tool, each request has the following::

request ID: "req<UTC TIMESTAMP>-<USER>", for the creation time and the user that created it
files in $LOCAL_BENCH_DIR/REQUESTS/<REQID>/:
   * request-json           - metadata for the request
   * compile.ini            - the generated compile config
   * send.sh                - executed on the portal host when the request becomes current
   * run.sh                 - executed on the bench host (via send.sh)
   * results.json           - metadata for the outcome
   * results-data.json.gz   - the data generated by pyperformance
   * run.log                - the stdout from running pyperformance

There are also some directories used by pyperformance.  These have a
"pyperformance-" prefix.
